#cloud-config
---
write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?

  - path: /opt/bin/gen.sh
    owner: root:root
    permissions: 0775
    content: |
      cd /etc/ssl/private && /opt/bin/etcd-ca-linux64 new-cert --passphrase="${cert_passphrase}" --ip="127.0.0.1,$private_ipv4,$public_ipv4,${lb_ip}" --domain="*.${domain}" $private_ipv4
      cd /etc/ssl/private && /opt/bin/etcd-ca-linux64 sign --passphrase="${cert_passphrase}" $private_ipv4
      cd /etc/ssl/private && /opt/bin/etcd-ca-linux64 export --passphrase="${cert_passphrase}" --insecure $private_ipv4 > $private_ipv4.tar
      cd /etc/ssl/private && tar -xvf /etc/ssl/private/$private_ipv4.tar
      chmod 755 /etc/ssl/private
      cd /etc/ssl/private && cp .etcd-ca/ca.crt ./ca.crt
      cd /etc/ssl/private && cp .etcd-ca/ca.crt /etc/ssl/certs/ca.pem
      mkdir /etc/ssl/etcd
      cp -R /etc/ssl/private/* /etc/ssl/etcd
      update-ca-certificates

  - path: /etc/flannel/options.env
    owner: root:root
    permissions: 0755
    content: |
      FLANNELD_IFACE=$private_ip4
      FLANNELD_ETCD_ENDPOINTS="https://etcd-lb.${domain}:2379"
      FLANNELD_ETCD_KEYFILE="/etc/ssl/etcd/$private_ipv4.key.insecure"
      FLANNELD_ETCD_CERTFILE="/etc/ssl/etcd/$private_ipv4.crt"
      FLANNELD_ETCD_CAFILE="/etc/ssl/etcd/ca.crt"
      
  - path: /etc/kubernetes/etcd-client.json
    owner: root:root
    permissions: 0755
    content: |
      {
        "cluster": {
          "machines": [ "https://etcd-lb.${domain}:2379" ]
        },
        "config": {
          "certFile": "/etc/ssl/private/$private_ipv4.crt",
          "keyFile": "/etc/ssl/private/$private_ipv4.key.insecure",
          "caCertFiles": [
            "/etc/ssl/private/ca.crt"
          ],
          "timeout": 5000000000,
          "consistency": "WEAK"
        }
      }

  - path: /etc/kubernetes/auth.csv
    owner: root:root
    permissions: 0755
    content: |
      admin,admin,pass

  - path: /etc/kubernetes/kube.config
    owner: root:root
    permissions: 0755
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          server: http://localhost:8080
        name: kube
      contexts:
      - context:
          cluster: kube
          user: admin
        name: default-context
      current-context: default-context
      preferences: {}
      users:
      - name: admin
        user:
          client-certificate: /etc/ssl/private/$private_ipv4.crt
          client-key: /etc/ssl/private/$private_ipv4.key.insecure
  - path: /etc/locofo/config.json
    owner: root:root
    permissions: 0644
    content: |
      {
        "BindAddress": "0.0.0.0:8090",
        "Certs": {
          "CaFile": "/etc/ssl/private/ca.crt",
          "CertFile": "/etc/ssl/private/$private_ipv4.crt",
          "KeyFile": "/etc/ssl/private/$private_ipv4.key.insecure"
        },
        "Server": "https://$private_ipv4:443",
        "Paths": [
          {
            "In": "/health",
            "Out": "/healthz/ping",
            "ValidationRegex": "ok"
          }
        ]
      }

coreos:
  units:
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: flanneld.service
      drop-ins:
        - name: 40-ExecStartPre-symlink.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
      command: start
    - name: docker.service
      command: start
    - name: generate-certs.service
      command: start
      content: |
        [Unit]
        Description=Create certificates for etcd
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        ExecStartPre=/bin/mkdir -p /etc/ssl/private/.etcd-ca || yes
        ExecStartPre=/opt/bin/metadata-downloader ${cluster_prefix}ca-crt-etcd /etc/ssl/private/.etcd-ca/ca.crt
        ExecStartPre=/opt/bin/metadata-downloader ${cluster_prefix}ca-key-etcd /etc/ssl/private/.etcd-ca/ca.key
        ExecStartPre=/opt/bin/metadata-downloader ${cluster_prefix}ca-info-etcd /etc/ssl/private/.etcd-ca/ca.crt.info
        ExecStart=/usr/bin/bash /opt/bin/gen.sh

        RemainAfterExit=yes
        Type=oneshot

    - name: locofo.service
      command: start
      content: |
        [Unit]
        Description=Locofo adds healthcheck support for http on gce
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        After=kube-apiserver.service

        [Service]
        ExecStart=/opt/bin/locofo-linux-amd64 /etc/locofo/config.json

        Restart=always
        RestartSec=5

    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=generate-certs.service

        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStart=/opt/bin/kube-apiserver \
        --admission-control=NamespaceLifecycle,NamespaceAutoProvision,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
        --allow-privileged=true \
        --basic-auth-file=/etc/kubernetes/auth.csv \
        --client-ca-file=/etc/ssl/private/ca.crt \
        --cloud-provider=${cloud_provider} \
        --cors_allowed_origins=.* \
        --etcd-config=/etc/kubernetes/etcd-client.json \
        --insecure-bind-address=0.0.0.0 \
        --insecure-port=8080 \
        --kubelet-https=true \
        --runtime-config=api/v1 \
        --secure-port=443 \
        --service-cluster-ip-range=10.220.0.0/16 \
        --tls-cert-file=/etc/ssl/private/$private_ipv4.crt \
        --tls-private-key-file=/etc/ssl/private/$private_ipv4.key.insecure \
        --logtostderr=true \
        --v=3
        Restart=always
        RestartSec=10

    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStart=/opt/bin/kube-controller-manager \
        --cloud-provider=${cloud_provider} \
        --kubeconfig=/etc/kubernetes/kube.config \
        --logtostderr=true \
        --master=127.0.0.1:8080 \
        --root-ca-file="/etc/ssl/private/ca.crt" \
        --v=3
        Restart=always
        RestartSec=10

    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStart=/opt/bin/kube-scheduler \
        --kubeconfig=/etc/kubernetes/kube.config \
        --logtostderr=true \
        --master=127.0.0.1:8080 \
        --v=3
        Restart=always
        RestartSec=10
