#cloud-config
---
write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?

  - path: /opt/stylelounge/gen.sh
    owner: root:root
    permissions: 0755
    content: |
      cd /etc/ssl/private && /opt/etcd/etcd-ca new-cert --passphrase="${cert_passphrase}" --ip="127.0.0.1,$private_ipv4,$public_ipv4,${lb_ip}" --domain="*.${domain}" $private_ipv4
      cd /etc/ssl/private && /opt/etcd/etcd-ca sign --passphrase="${cert_passphrase}" $private_ipv4
      cd /etc/ssl/private && /opt/etcd/etcd-ca export --passphrase="${cert_passphrase}" --insecure $private_ipv4 > $private_ipv4.tar
      cd /etc/ssl/private && tar -xvf /etc/ssl/private/$private_ipv4.tar
      chmod 755 /etc/ssl/private
      cd /etc/ssl/private && cp .etcd-ca/ca.crt ./ca.crt
      cd /etc/ssl/private && cp .etcd-ca/ca.crt /etc/ssl/certs/ca.pem
      update-ca-certificates
      mkdir /etc/kubernetes/manifests

  - path: /etc/kubernetes/auth.csv
    owner: root:root
    permissions: 0755
    content: |
      admin,admin,pass

  - path: /etc/kubernetes/kube.config
    owner: root:root
    permissions: 0755
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          server: ${kube_master_url}
        name: kube
      contexts:
      - context:
          cluster: kube
          user: myself
        name: default-context
      current-context: default-context
      preferences: {}
      users:
      - name: admin
        user:
          client-certificate: /etc/ssl/private/$private_ipv4.crt
          client-key: /etc/ssl/private/$private_ipv4.key.insecure

coreos:
  units:
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: docker.service
      command: start
    - name: generate-certs.service
      command: start
      content: |
        [Unit]
        Description=Create certificates for etcd
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        ExecStartPre=/bin/mkdir -p /etc/ssl/private/.etcd-ca || yes
        ExecStartPre=/opt/stylelounge/metadata-downloader ${cluster_prefix}ca-crt-etcd /etc/ssl/private/.etcd-ca/ca.crt
        ExecStartPre=/opt/stylelounge/metadata-downloader ${cluster_prefix}ca-key-etcd /etc/ssl/private/.etcd-ca/ca.key
        ExecStartPre=/opt/stylelounge/metadata-downloader ${cluster_prefix}ca-info-etcd /etc/ssl/private/.etcd-ca/ca.crt.info
        ExecStart=/usr/bin/bash /opt/stylelounge/gen.sh

        RemainAfterExit=yes
        Type=oneshot

#--cluster_dns={DNS_SERVICE_IP} \
#           --cluster_domain=cluster.local \
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=generate-certs.service
        After=generate-certs.service

        [Service]
        ExecStart=/opt/kubernetes/hyperkube kubelet \
          --kubeconfig=/etc/kubernetes/kube.config \
          --api-servers=${kube_master_url} \
          --register-node=true \
          --cloud-provider=${cloud_provider} \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
          --cadvisor-port=0

        Restart=always
        RestartSec=10

#           --google-json-key=""
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-proxy.service
        After=kube-proxy.service

        [Service]
        ExecStart=/opt/kubernetes/hyperkube proxy \
          --kubeconfig=/etc/kubernetes/kube.config \
          --bind-address=0.0.0.0 \
          --healthz-bind-address=0.0.0.0 \
          --healthz-port=10249 \
          --log-flush-frequency=5s \
          --masquerade-all=false \
          --oom-score-adj=-999 \
          --proxy-mode=userspace \
          --resource-container="/kube-proxy" \
          --udp-timeout=250ms

        Restart=always
        RestartSec=10
